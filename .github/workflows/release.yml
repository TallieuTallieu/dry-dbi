name: Automated Release and Tagging

on:
  # Trigger on pushes to release branches or main branch
  push:
    branches: 
      - main
      - 'release/**'
      - 'hotfix/**'
      - 'version/**'
  
  # Manual trigger with optional version override
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (optional - will use branch name if not provided)'
        required: false
        type: string
      release_type:
        description: 'Type of release'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - prerelease

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for changelog generation
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          tools: composer

      - name: Install dependencies
        run: composer install --no-dev --optimize-autoloader

      - name: Extract version from branch name or input
        id: get_version
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          echo "Current branch: $BRANCH_NAME"
          
          # Check if manual version is provided
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "Using manual version: $VERSION"
          else
            # Extract version from branch name using multiple patterns
            VERSION=""
            
            # Pattern 1: release/v3.2.0 or release/3.2.0
            if [[ $BRANCH_NAME =~ ^release/v?([0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.-]+)?(\+[a-zA-Z0-9\.-]+)?)$ ]]; then
              VERSION="${BASH_REMATCH[1]}"
              echo "Extracted version from release branch: $VERSION"
            
            # Pattern 2: hotfix/v3.1.1 or hotfix/3.1.1  
            elif [[ $BRANCH_NAME =~ ^hotfix/v?([0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.-]+)?(\+[a-zA-Z0-9\.-]+)?)$ ]]; then
              VERSION="${BASH_REMATCH[1]}"
              echo "Extracted version from hotfix branch: $VERSION"
            
            # Pattern 3: version/3.2.0 or v3.2.0
            elif [[ $BRANCH_NAME =~ ^(version/|v)([0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.-]+)?(\+[a-zA-Z0-9\.-]+)?)$ ]]; then
              VERSION="${BASH_REMATCH[2]}"
              echo "Extracted version from version branch: $VERSION"
            
            # Pattern 4: feature/v3.2.0-feature-name
            elif [[ $BRANCH_NAME =~ ^feature/v?([0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.-]+)?(\+[a-zA-Z0-9\.-]+)?) ]]; then
              VERSION="${BASH_REMATCH[1]}"
              echo "Extracted version from feature branch: $VERSION"
            
            # Pattern 5: main branch - use composer.json version
            elif [[ $BRANCH_NAME == "main" ]]; then
              if [ -f "composer.json" ]; then
                VERSION=$(php -r "
                  \$composer = json_decode(file_get_contents('composer.json'), true);
                  echo isset(\$composer['version']) ? \$composer['version'] : '';
                ")
                if [ -n "$VERSION" ]; then
                  echo "Using composer.json version: $VERSION"
                else
                  echo "Error: No version found in composer.json for main branch"
                  exit 1
                fi
              else
                echo "Error: composer.json not found for main branch"
                exit 1
              fi
            
            # No version found in branch name
            else
              echo "Error: Could not extract version from branch name '$BRANCH_NAME'"
              echo "Supported patterns:"
              echo "  - release/v3.2.0 or release/3.2.0"
              echo "  - hotfix/v3.1.1 or hotfix/3.1.1"
              echo "  - version/3.2.0 or v3.2.0"
              echo "  - feature/v3.2.0-feature-name"
              echo "  - main (uses composer.json version)"
              exit 1
            fi
          fi
          
          # Validate semantic versioning format
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.-]+)?(\+[a-zA-Z0-9\.-]+)?$ ]]; then
            echo "Error: Version '$VERSION' does not follow semantic versioning format"
            echo "Expected format: X.Y.Z or X.Y.Z-suffix or X.Y.Z+build"
            exit 1
          fi
          
          echo "Final version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Check if tag already exists
        id: check_tag
        run: |
          TAG="v${{ steps.get_version.outputs.version }}"
          if git tag -l | grep -q "^$TAG$"; then
            echo "Tag $TAG already exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Tag $TAG does not exist"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Get latest tag for changelog
        id: latest_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LATEST_TAG" ]; then
            echo "No previous tags found"
            echo "tag=" >> $GITHUB_OUTPUT
          else
            echo "Latest tag: $LATEST_TAG"
            echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          TAG="v${{ steps.get_version.outputs.version }}"
          LATEST_TAG="${{ steps.latest_tag.outputs.tag }}"
          
          echo "# Release $TAG" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          if [ -n "$LATEST_TAG" ]; then
            echo "## Changes since $LATEST_TAG" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            
            # Get commits since last tag
            git log --pretty=format:"- %s (%h)" $LATEST_TAG..HEAD >> CHANGELOG.md
          else
            echo "## Initial Release" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "This is the first tagged release of dry-dbi." >> CHANGELOG.md
          fi
          
          echo "" >> CHANGELOG.md
          echo "## Installation" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo '```bash' >> CHANGELOG.md
          echo "composer require tallieutallieu/dry-dbi:^${{ steps.get_version.outputs.version }}" >> CHANGELOG.md
          echo '```' >> CHANGELOG.md
          
          # Read changelog content for release notes
          CHANGELOG_CONTENT=$(cat CHANGELOG.md)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update composer.json version
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          BRANCH="${{ steps.get_version.outputs.branch }}"
          
          # Always update composer.json to match the version being released
          echo "Updating composer.json version to $VERSION"
          php -r "
            \$composer = json_decode(file_get_contents('composer.json'), true);
            \$composer['version'] = '$VERSION';
            file_put_contents('composer.json', json_encode(\$composer, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES) . PHP_EOL);
          "
          
          # Commit the version update if there are changes
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if ! git diff --quiet composer.json; then
            git add composer.json
            git commit -m "chore: update composer.json version to $VERSION"
            
            # Push to current branch (not necessarily main)
            git push origin HEAD
            echo "Updated composer.json version to $VERSION"
          else
            echo "composer.json already has version $VERSION, no update needed"
          fi

      - name: Create and push tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          TAG="v${{ steps.get_version.outputs.version }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a $TAG -m "Release $TAG"
          git push origin $TAG

      - name: Create GitHub Release
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ github.event.inputs.release_type == 'prerelease' || contains(steps.get_version.outputs.version, '-') }}

      - name: Run tests (if available)
        continue-on-error: true
        run: |
          if [ -f "vendor/bin/pest" ]; then
            echo "Running Pest tests..."
            vendor/bin/pest
          elif [ -f "vendor/bin/phpunit" ]; then
            echo "Running PHPUnit tests..."
            vendor/bin/phpunit
          else
            echo "No test runner found, skipping tests"
          fi

      - name: Validate Composer
        run: composer validate --strict

      - name: Summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ steps.get_version.outputs.branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: v${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: v${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.check_tag.outputs.exists }}" = "true" ]; then
            echo "- **Status**: ⚠️ Tag already exists, skipped release creation" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status**: ✅ Release created successfully" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Branch Naming Patterns Supported:" >> $GITHUB_STEP_SUMMARY
          echo "- \`release/v3.2.0\` or \`release/3.2.0\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`hotfix/v3.1.1\` or \`hotfix/3.1.1\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`version/3.2.0\` or \`v3.2.0\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`feature/v3.2.0-feature-name\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`main\` (uses composer.json version)" >> $GITHUB_STEP_SUMMARY