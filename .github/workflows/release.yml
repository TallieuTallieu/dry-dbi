name: Auto Release

on:
  push:
    branches: [master]
    paths-ignore:
      - 'README.md'
      - 'AGENTS.md'
      - '.gitignore'
      - '.github/**'

jobs:
  auto-release:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          tools: composer

      - name: Install dependencies
        run: composer install --no-dev --optimize-autoloader

      - name: Run verification checks
        run: |
          composer validate --strict
          echo "âœ… All checks passed"

      - name: Determine version bump type
        id: version-type
        run: |
          # Get the last commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)

          # Get branch name from the merge commit if it exists
          BRANCH_NAME=""
          if [[ "$COMMIT_MSG" == *"Merge pull request"* ]]; then
            BRANCH_NAME=$(echo "$COMMIT_MSG" | grep -o 'from [^/]*/[^[:space:]]*' | cut -d'/' -f2)
          fi

          # Determine version type - branch name takes precedence, then commit message
          VERSION_TYPE="patch"  # default

          # First check commit message for breaking changes (highest priority)
          if [[ "$COMMIT_MSG" == *"BREAKING CHANGE"* ]] || [[ "$COMMIT_MSG" == *"feat!"* ]]; then
            VERSION_TYPE="major"
          # Then check branch name (medium priority)
          elif [[ "$BRANCH_NAME" == *"major"* ]] || [[ "$BRANCH_NAME" == *"breaking"* ]]; then
            VERSION_TYPE="major"
          elif [[ "$BRANCH_NAME" == *"feat"* ]] || [[ "$BRANCH_NAME" == *"feature"* ]] || [[ "$BRANCH_NAME" == *"minor"* ]]; then
            VERSION_TYPE="minor"
          elif [[ "$BRANCH_NAME" == *"fix"* ]] || [[ "$BRANCH_NAME" == *"hotfix"* ]] || [[ "$BRANCH_NAME" == *"patch"* ]]; then
            VERSION_TYPE="patch"
          # Check for Shortcut feature branches
          elif [[ "$BRANCH_NAME" == *"sc-"* ]] && [[ "$BRANCH_NAME" == *"feature"* ]]; then
            VERSION_TYPE="minor"
          # Finally check commit message (lowest priority)
          elif [[ "$COMMIT_MSG" == *"feat:"* ]] || [[ "$COMMIT_MSG" == *"feat("* ]]; then
            VERSION_TYPE="minor"
          elif [[ "$COMMIT_MSG" == *"fix:"* ]] || [[ "$COMMIT_MSG" == *"fix("* ]]; then
            VERSION_TYPE="patch"
          fi

          echo "Branch name: $BRANCH_NAME"
          echo "Commit message: $COMMIT_MSG"
          echo "Version type: $VERSION_TYPE"
          echo "version_type=$VERSION_TYPE" >> "$GITHUB_OUTPUT"

      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Check if version should be bumped
        id: should-release
        run: |
          # Skip if this is already a version commit
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ "$COMMIT_MSG" == *"chore(release):"* ]] || [[ "$COMMIT_MSG" == *"bump version"* ]]; then
            echo "Skipping release - this is a version bump commit"
            echo "should_release=false" >> "$GITHUB_OUTPUT"
          else
            echo "should_release=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Get current version and bump
        id: version
        if: steps.should-release.outputs.should_release == 'true'
        run: |
          # Get current version from latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LATEST_TAG" ]; then
            OLD_VERSION="0.0.0"
            echo "No previous tags found, starting from $OLD_VERSION"
          else
            # Remove 'v' prefix if it exists (handle both v3.2.0 and 3.2.0 formats)
            OLD_VERSION=${LATEST_TAG#v}
            echo "Latest tag: $LATEST_TAG"
            echo "Current version: $OLD_VERSION"
          fi

          # Parse current version
          if [[ $OLD_VERSION =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}

            # Apply version bump
            case ${{ steps.version-type.outputs.version_type }} in
              "major")
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              "minor")
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              "patch")
                PATCH=$((PATCH + 1))
                ;;
            esac

            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          else
            echo "Error: Invalid current version format '$OLD_VERSION'"
            exit 1
          fi

          echo "old_version=$OLD_VERSION" >> "$GITHUB_OUTPUT"
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "Bumped version: $OLD_VERSION â†’ $NEW_VERSION (${{ steps.version-type.outputs.version_type }})"

      - name: Create and push tag
        if: steps.should-release.outputs.should_release == 'true'
        run: |
          git tag "${{ steps.version.outputs.new_version }}"
          git push origin --tags

      - name: Generate changelog
        if: steps.should-release.outputs.should_release == 'true'
        id: changelog
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          if [ -n "$LATEST_TAG" ]; then
            echo "## Changes since $LATEST_TAG" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            git log --pretty=format:"- %s (%h)" $LATEST_TAG..HEAD >> CHANGELOG.md
          else
            echo "## Initial Release" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "This is the first tagged release of dry-dbi." >> CHANGELOG.md
          fi

          echo "" >> CHANGELOG.md
          echo "## Installation" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo '```bash' >> CHANGELOG.md
          echo "composer require tallieutallieu/dry-dbi:^${{ steps.version.outputs.new_version }}" >> CHANGELOG.md
          echo '```' >> CHANGELOG.md

      - name: Create GitHub Release
        if: steps.should-release.outputs.should_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.new_version }}
          name: Release ${{ steps.version.outputs.new_version }}
          body: |
            ## ðŸš€ Release ${{ steps.version.outputs.new_version }}

            **Version bump**: ${{ steps.version.outputs.old_version }} â†’ ${{ steps.version.outputs.new_version }} (${{ steps.version-type.outputs.version_type }})

            ### Changes
            $(cat CHANGELOG.md)

            ### Installation

            ```bash
            composer require tallieutallieu/dry-dbi:^${{ steps.version.outputs.new_version }}
            ```

            ### Usage

            ```php
            use Tnt\Dbi\BaseRepository;
            use Tnt\Dbi\Criteria\Equals;

            class UserRepository extends BaseRepository
            {
                protected $model = User::class;

                public function active(): self
                {
                    $this->addCriteria(new Equals('is_active', true));
                    return $this;
                }
            }
            ```
          draft: false
          prerelease: false

      - name: Run tests (if available)
        if: steps.should-release.outputs.should_release == 'true'
        continue-on-error: true
        run: |
          if [ -f "vendor/bin/pest" ]; then
            echo "Running Pest tests..."
            vendor/bin/pest
          elif [ -f "vendor/bin/phpunit" ]; then
            echo "Running PHPUnit tests..."
            vendor/bin/phpunit
          else
            echo "No test runner found, skipping tests"
          fi

      - name: Notify success
        if: steps.should-release.outputs.should_release == 'true'
        run: |
          echo "ðŸŽ‰ Package tallieutallieu/dry-dbi@${{ steps.version.outputs.new_version }} released successfully!"
          echo "ðŸ“¦ Version: ${{ steps.version.outputs.old_version }} â†’ ${{ steps.version.outputs.new_version }}"
          echo "ðŸ”„ Type: ${{ steps.version-type.outputs.version_type }}"
